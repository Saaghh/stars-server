// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GameTickParams is parameters of gameTick operation.
type GameTickParams struct {
	// Game ID.
	GameID int
	// Duration parameter.
	Duration time.Duration
}

func unpackGameTickParams(packed middleware.Parameters) (params GameTickParams) {
	{
		key := middleware.ParameterKey{
			Name: "game_id",
			In:   "path",
		}
		params.GameID = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "duration",
			In:   "query",
		}
		params.Duration = packed[key].(time.Duration)
	}
	return params
}

func decodeGameTickParams(args [1]string, argsEscaped bool, r *http.Request) (params GameTickParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: game_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "game_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GameID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "game_id",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: duration.
	{
		val, _ := json.DecodeDuration(jx.DecodeStr("\"5s\""))
		params.Duration = val
	}
	// Decode query: duration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "duration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDuration(val)
				if err != nil {
					return err
				}

				params.Duration = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "duration",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBodiesParams is parameters of getBodies operation.
type GetBodiesParams struct {
	// Game ID.
	GameID int
}

func unpackGetBodiesParams(packed middleware.Parameters) (params GetBodiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "game_id",
			In:   "path",
		}
		params.GameID = packed[key].(int)
	}
	return params
}

func decodeGetBodiesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBodiesParams, _ error) {
	// Decode path: game_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "game_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GameID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "game_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSystemsParams is parameters of getSystems operation.
type GetSystemsParams struct {
	// Game ID.
	GameID int
}

func unpackGetSystemsParams(packed middleware.Parameters) (params GetSystemsParams) {
	{
		key := middleware.ParameterKey{
			Name: "game_id",
			In:   "path",
		}
		params.GameID = packed[key].(int)
	}
	return params
}

func decodeGetSystemsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSystemsParams, _ error) {
	// Decode path: game_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "game_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.GameID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "game_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
